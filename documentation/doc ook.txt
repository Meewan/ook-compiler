Le ook est un dérivé du brainfuck conçut pour fonctionner dans un environement 8bit représenté apr un tableau infini d'octets. 
Notre compilateur vise la plateforme DCPU-16 qui est un processeur virtuel (tres lent) 16 bits avec 8 registres de travail et 4 registres spéciaux. Ce processeur a l'avantage d'avoir un acces a la RAM instantané (aussi rapide qu'un acces a un registre soit 1 cycle) ce qui nous permet de représenter un tres grand tableau d'octets (qui occupent en réalité 16 bits en mémoire car notre provbleme n'est pas la RAM disponible mais le manque d'adresses).
La lib utilisé dans le compilateur fournit les services minimum en considerent que le programme es seul dans la RAM (pas de systeme d'exploitation) aisin elle fournit une gestion basique des interuptions clavié quand le programme doit écouter le clavier et permet d'ecrire a l'écran les autres preipheriques ne sont pas géré.
L'émulateur utilisé est l'ide 0x10c devkit 1.7.5 trouvable a l'adresse https://github.com/kierenj/0x10c-DevKit/downloads . Cet environement ne fonctionne pas tres bien et demande que le programme soit executé pas a pas (dans les tests sur la lib 10c il avait du mal a afficher un simple caractere.)

Les fichiers de test sont boucleio.ook qui est un programme qui recopie au l'écran la touche frappé (dans les limites de l'émulateur DCPU-16) sa logique en pseudo-code est 

-incremente le premier octet de 1
-tant que le premier octet n'est pas nul
	-attend une entrée clavier et stocke la dans l'octet courant
	-affiche le contenu de l'octet courant
-fin de boucle
-fin de programme (jamais atteint)

Le deuxieme fichier de tests affiche un "1" (49 en ascii) puis un "0" (48 en ascii) sa logique est :
-incremente le premier octet (repeté 5 fois)
-on fais une boucle tant que le premier octet est non nul
	-on passe sur le deuxieme octet
	-on incremente le deuxieme octet de 10
	-on repasse sur le premier octet
	-on décremente le premier octet
-sortie de boucle(le premier octet vaut maintenent 0 et le deuxieme 50 (5*10))
-on passe sur le deuxieme octet
-on decremente le deuxieme octet (qui vaut maintenant 49 donc 1 en ascii)
-on affiche le deuxueme octet
-on decremente le deuxieme octet
-on affiche le deuxieme octet (qui vaut maintenant 48 donc 2 en ascii)
-fin de programme

Ces deux programmes utilisent toutes les instructions ook et devraient fonctionner sur notre compilateur.